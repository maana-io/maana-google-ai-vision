"""
Autogenerated input for adding instance of BestGuessLabel
"""
input AddBestGuessLabelInput {
  """
  id
  """
  id: ID
  languageCode: ID
}

"""
Autogenerated input for adding instance of BoundingPoly
"""
input AddBoundingPolyInput {
  """
  id
  """
  id: ID
  vertices: [ID]
  normalizedVertices: [ID]
}

"""
Autogenerated input for adding instance of Country
"""
input AddCountryInput {
  """
  id
  """
  id: ID
  name: String
  localizedName: ID
}

"""
Autogenerated input for adding instance of ImageAnalysisResults
"""
input AddImageAnalysisResultsInput {
  """
  id
  """
  id: ID
  webDetection: ID!
  localizedObjectAnnotations: [ID]!
  labelAnnotations: [ID]!
}

"""
Autogenerated input for adding instance of LabelAnnotation
"""
input AddLabelAnnotationInput {
  """
  id
  """
  id: ID
  description: String
  score: Float
}

"""
Autogenerated input for adding instance of Language
"""
input AddLanguageInput {
  """
  id
  """
  id: ID
  localizedName: ID
  name: String
}

"""
Autogenerated input for adding instance of LanguageTag
"""
input AddLanguageTagInput {
  """
  id
  """
  id: ID
  languageCode: ID
  country: ID
}

"""
Autogenerated input for adding instance of LocalizedObjectAnnotation
"""
input AddLocalizedObjectAnnotationInput {
  """
  id
  """
  id: ID
  name: String!
  score: Float!
  boundingPoly: ID!
}

"""
Autogenerated input for adding instance of LocalizedText
"""
input AddLocalizedTextInput {
  """
  id
  """
  id: ID
  languageTag: ID
  text: String!
}

"""
Autogenerated input for adding instance of Vertex2D
"""
input AddVertex2DInput {
  """
  id
  """
  id: ID
  x: Float!
  y: Float!
}

"""
Autogenerated input for adding instance of WebDetection
"""
input AddWebDetectionInput {
  """
  id
  """
  id: ID
  webEntities: [ID]!
  bestGuessLabels: [ID]!
}

"""
Autogenerated input for adding instance of WebEntity
"""
input AddWebEntityInput {
  """
  id
  """
  id: ID
  score: Float!
  description: String!
}

enum AggregateOp {
  MIN
  MAX
  SUM
  COUNT
}

type BestGuessLabel {
  """
  id
  """
  id: ID!
  languageCode: LanguageTag
}

input BestGuessLabelAsInput {
  id: ID!
  languageCode: LanguageTagAsInput
}

type BestGuessLabelOutput {
  id: ID!
  languageCode: LanguageTagOutput
}

type BoundingPoly {
  """
  id
  """
  id: ID!
  vertices: [Vertex2D]
  normalizedVertices: [Vertex2D]
}

input BoundingPolyAsInput {
  id: ID!
  vertices: [Vertex2DAsInput]
  normalizedVertices: [Vertex2DAsInput]
}

type BoundingPolyOutput {
  id: ID!
  vertices: [Vertex2DOutput]
  normalizedVertices: [Vertex2DOutput]
}

type Country {
  """
  id
  """
  id: ID!
  name: String
  localizedName: LocalizedText
}

input CountryAsInput {
  id: ID!
  name: String
  localizedName: LocalizedTextAsInput
}

type CountryOutput {
  id: ID!
  name: String
  localizedName: LocalizedTextOutput
}

scalar Date

scalar DateTime

input EncodingAsInput {
  id: ID!
  name: String
}

input FieldFilterInput {
  """
  one of the following is required
  """
  fieldId: ID
  fieldName: String
  op: String!
  value: FieldValueInput!
}

input FieldProjectionInput {
  """
  one of the following is required - except in the case of count queries
  """
  fieldId: ID
  fieldName: String

  """
  optional if omitted outer query is used
  """
  alias: String
  op: AggregateOp
}

type FieldValue {
  """
  Types
  """
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """
  List forms
  """
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FieldValueInput {
  """
  Types
  """
  ID: ID
  STRING: String
  INT: Int
  FLOAT: Float
  BOOLEAN: Boolean
  DATE: Date
  TIME: Time
  DATETIME: DateTime
  JSON: JSON
  KIND: ID

  """
  List forms
  """
  l_ID: [ID]
  l_STRING: [String]
  l_INT: [Int]
  l_FLOAT: [Float]
  l_BOOLEAN: [Boolean]
  l_DATE: [Date]
  l_TIME: [Time]
  l_DATETIME: [DateTime]
  l_JSON: [JSON]
  l_KIND: [ID]
}

input FileAsInput {
  id: ID!
  policies: [RBACPolicyAsInput]
  size: SizeAsInput
  format: FormatAsInput
  encoding: EncodingAsInput
  name: String
}

input FormatAsInput {
  id: ID!
  name: String
}

type ImageAnalysisResults {
  """
  id
  """
  id: ID!
  webDetection: WebDetection!
  localizedObjectAnnotations: [LocalizedObjectAnnotation]!
  labelAnnotations: [LabelAnnotation]!
}

input ImageAnalysisResultsAsInput {
  id: ID!
  webDetection: WebDetectionAsInput!
  localizedObjectAnnotations: [LocalizedObjectAnnotationAsInput!]!
  labelAnnotations: [LabelAnnotationAsInput!]!
}

type ImageAnalysisResultsOutput {
  id: ID!
  webDetection: WebDetectionOutput!
  localizedObjectAnnotations: [LocalizedObjectAnnotationOutput!]!
  labelAnnotations: [LabelAnnotationOutput!]!
}

input ImageAsInput {
  id: ID!
  file: FileAsInput!
  dimensions: ImageDimensionsAsInput
}

input ImageDimensionsAsInput {
  id: ID!
  width: SizeAsInput
  height: SizeAsInput
  depth: SizeAsInput
}

type Info {
  id: ID!
  name: String!
  description: String
}

type InstanceSet {
  kindId: ID!

  """
  Continuation token
  """
  token: String
  fieldIds: [ID]

  """
  rowKeys: [Int]
  """
  records: [[FieldValue]]
}

scalar JSON

input KindQueryInput {
  """
  projected kind (one of the following is required)
  """
  kindId: ID
  kindName: String
  serviceId: ID

  """
  optional alias for projection binding
  """
  alias: String

  """
  projected fields
  """
  projection: [FieldProjectionInput]

  """
  distinct Projected result
  """
  distinct: Boolean

  """
  filters (where)
  """
  fieldFilters: [FieldFilterInput]

  """
  conjunction (where)
  """
  and: [KindQueryInput]

  """
  disjunction (where)
  """
  or: [KindQueryInput]

  """
  join (if conjunction or disjunction)
  """
  fromFieldId: ID
  fromFieldName: String
  toFieldId: ID
  toFieldName: String
  take: Int
  token: String
}

type LabelAnnotation {
  """
  id
  """
  id: ID!
  description: String
  score: Float
}

input LabelAnnotationAsInput {
  id: ID!
  description: String
  score: Float
}

type LabelAnnotationOutput {
  id: ID!
  description: String
  score: Float
}

type Language {
  """
  id
  """
  id: ID!
  localizedName: LocalizedText
  name: String
}

input LanguageAsInput {
  id: ID!
  localizedName: LocalizedTextAsInput
  name: String
}

type LanguageOutput {
  id: ID!
  localizedName: LocalizedTextOutput
  name: String
}

type LanguageTag {
  """
  id
  """
  id: ID!
  languageCode: Language
  country: Country
}

input LanguageTagAsInput {
  id: ID!
  languageCode: LanguageAsInput
  country: CountryAsInput
}

type LanguageTagOutput {
  id: ID!
  languageCode: LanguageOutput
  country: CountryOutput
}

type LocalizedObjectAnnotation {
  """
  id
  """
  id: ID!
  name: String!
  score: Float!
  boundingPoly: BoundingPoly!
}

input LocalizedObjectAnnotationAsInput {
  id: ID!
  name: String!
  score: Float!
  boundingPoly: BoundingPolyAsInput!
}

type LocalizedObjectAnnotationOutput {
  id: ID!
  name: String!
  score: Float!
  boundingPoly: BoundingPolyOutput!
}

type LocalizedText {
  """
  id
  """
  id: ID!
  languageTag: LanguageTag
  text: String!
}

input LocalizedTextAsInput {
  id: ID!
  languageTag: LanguageTagAsInput
  text: String!
}

type LocalizedTextOutput {
  id: ID!
  languageTag: LanguageTagOutput
  text: String!
}

type Mutation {
  """
  Autogenerated mutation for adding single instance of BestGuessLabel
  """
  addBestGuessLabel(input: AddBestGuessLabelInput!): ID

  """
  Autogenerated mutation for adding multiple instances of BestGuessLabel
  """
  addBestGuessLabels(input: [AddBestGuessLabelInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of BestGuessLabel
  """
  updateBestGuessLabel(input: UpdateBestGuessLabelInput!): ID

  """
  Autogenerated mutation for updating multiple instance of BestGuessLabel
  """
  updateBestGuessLabels(input: [UpdateBestGuessLabelInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of BestGuessLabel
  """
  deleteBestGuessLabel(id: ID!): BestGuessLabel

  """
  Autogenerated mutation for deleting multiple instance of BestGuessLabel
  """
  deleteBestGuessLabels(ids: [ID!]): [BestGuessLabel]

  """
  Autogenerated mutation for adding single instance of LabelAnnotation
  """
  addLabelAnnotation(input: AddLabelAnnotationInput!): ID

  """
  Autogenerated mutation for adding multiple instances of LabelAnnotation
  """
  addLabelAnnotations(input: [AddLabelAnnotationInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of LabelAnnotation
  """
  updateLabelAnnotation(input: UpdateLabelAnnotationInput!): ID

  """
  Autogenerated mutation for updating multiple instance of LabelAnnotation
  """
  updateLabelAnnotations(input: [UpdateLabelAnnotationInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of LabelAnnotation
  """
  deleteLabelAnnotation(id: ID!): LabelAnnotation

  """
  Autogenerated mutation for deleting multiple instance of LabelAnnotation
  """
  deleteLabelAnnotations(ids: [ID!]): [LabelAnnotation]

  """
  Autogenerated mutation for adding single instance of WebDetection
  """
  addWebDetection(input: AddWebDetectionInput!): ID

  """
  Autogenerated mutation for adding multiple instances of WebDetection
  """
  addWebDetections(input: [AddWebDetectionInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of WebDetection
  """
  updateWebDetection(input: UpdateWebDetectionInput!): ID

  """
  Autogenerated mutation for updating multiple instance of WebDetection
  """
  updateWebDetections(input: [UpdateWebDetectionInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of WebDetection
  """
  deleteWebDetection(id: ID!): WebDetection

  """
  Autogenerated mutation for deleting multiple instance of WebDetection
  """
  deleteWebDetections(ids: [ID!]): [WebDetection]

  """
  Autogenerated mutation for adding single instance of BoundingPoly
  """
  addBoundingPoly(input: AddBoundingPolyInput!): ID

  """
  Autogenerated mutation for adding multiple instances of BoundingPoly
  """
  addBoundingPolys(input: [AddBoundingPolyInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of BoundingPoly
  """
  updateBoundingPoly(input: UpdateBoundingPolyInput!): ID

  """
  Autogenerated mutation for updating multiple instance of BoundingPoly
  """
  updateBoundingPolys(input: [UpdateBoundingPolyInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of BoundingPoly
  """
  deleteBoundingPoly(id: ID!): BoundingPoly

  """
  Autogenerated mutation for deleting multiple instance of BoundingPoly
  """
  deleteBoundingPolys(ids: [ID!]): [BoundingPoly]

  """
  Autogenerated mutation for adding single instance of LocalizedObjectAnnotation
  """
  addLocalizedObjectAnnotation(input: AddLocalizedObjectAnnotationInput!): ID

  """
  Autogenerated mutation for adding multiple instances of LocalizedObjectAnnotation
  """
  addLocalizedObjectAnnotations(
    input: [AddLocalizedObjectAnnotationInput]!
  ): [ID]

  """
  Autogenerated mutation for updating single instance of LocalizedObjectAnnotation
  """
  updateLocalizedObjectAnnotation(
    input: UpdateLocalizedObjectAnnotationInput!
  ): ID

  """
  Autogenerated mutation for updating multiple instance of LocalizedObjectAnnotation
  """
  updateLocalizedObjectAnnotations(
    input: [UpdateLocalizedObjectAnnotationInput]!
  ): [ID]

  """
  Autogenerated mutation for deleting single instance of LocalizedObjectAnnotation
  """
  deleteLocalizedObjectAnnotation(id: ID!): LocalizedObjectAnnotation

  """
  Autogenerated mutation for deleting multiple instance of LocalizedObjectAnnotation
  """
  deleteLocalizedObjectAnnotations(ids: [ID!]): [LocalizedObjectAnnotation]

  """
  Autogenerated mutation for adding single instance of WebEntity
  """
  addWebEntity(input: AddWebEntityInput!): ID

  """
  Autogenerated mutation for adding multiple instances of WebEntity
  """
  addWebEntitys(input: [AddWebEntityInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of WebEntity
  """
  updateWebEntity(input: UpdateWebEntityInput!): ID

  """
  Autogenerated mutation for updating multiple instance of WebEntity
  """
  updateWebEntitys(input: [UpdateWebEntityInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of WebEntity
  """
  deleteWebEntity(id: ID!): WebEntity

  """
  Autogenerated mutation for deleting multiple instance of WebEntity
  """
  deleteWebEntitys(ids: [ID!]): [WebEntity]

  """
  Autogenerated mutation for adding single instance of ImageAnalysisResults
  """
  addImageAnalysisResults(input: AddImageAnalysisResultsInput!): ID

  """
  Autogenerated mutation for adding multiple instances of ImageAnalysisResults
  """
  addImageAnalysisResultss(input: [AddImageAnalysisResultsInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of ImageAnalysisResults
  """
  updateImageAnalysisResults(input: UpdateImageAnalysisResultsInput!): ID

  """
  Autogenerated mutation for updating multiple instance of ImageAnalysisResults
  """
  updateImageAnalysisResultss(input: [UpdateImageAnalysisResultsInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of ImageAnalysisResults
  """
  deleteImageAnalysisResults(id: ID!): ImageAnalysisResults

  """
  Autogenerated mutation for deleting multiple instance of ImageAnalysisResults
  """
  deleteImageAnalysisResultss(ids: [ID!]): [ImageAnalysisResults]

  """
  Autogenerated mutation for adding single instance of LanguageTag
  """
  addLanguageTag(input: AddLanguageTagInput!): ID

  """
  Autogenerated mutation for adding multiple instances of LanguageTag
  """
  addLanguageTags(input: [AddLanguageTagInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of LanguageTag
  """
  updateLanguageTag(input: UpdateLanguageTagInput!): ID

  """
  Autogenerated mutation for updating multiple instance of LanguageTag
  """
  updateLanguageTags(input: [UpdateLanguageTagInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of LanguageTag
  """
  deleteLanguageTag(id: ID!): LanguageTag

  """
  Autogenerated mutation for deleting multiple instance of LanguageTag
  """
  deleteLanguageTags(ids: [ID!]): [LanguageTag]

  """
  Autogenerated mutation for adding single instance of Vertex2D
  """
  addVertex2D(input: AddVertex2DInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Vertex2D
  """
  addVertex2Ds(input: [AddVertex2DInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of Vertex2D
  """
  updateVertex2D(input: UpdateVertex2DInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Vertex2D
  """
  updateVertex2Ds(input: [UpdateVertex2DInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of Vertex2D
  """
  deleteVertex2D(id: ID!): Vertex2D

  """
  Autogenerated mutation for deleting multiple instance of Vertex2D
  """
  deleteVertex2Ds(ids: [ID!]): [Vertex2D]

  """
  Autogenerated mutation for adding single instance of Language
  """
  addLanguage(input: AddLanguageInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Language
  """
  addLanguages(input: [AddLanguageInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of Language
  """
  updateLanguage(input: UpdateLanguageInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Language
  """
  updateLanguages(input: [UpdateLanguageInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of Language
  """
  deleteLanguage(id: ID!): Language

  """
  Autogenerated mutation for deleting multiple instance of Language
  """
  deleteLanguages(ids: [ID!]): [Language]

  """
  Autogenerated mutation for adding single instance of Country
  """
  addCountry(input: AddCountryInput!): ID

  """
  Autogenerated mutation for adding multiple instances of Country
  """
  addCountrys(input: [AddCountryInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of Country
  """
  updateCountry(input: UpdateCountryInput!): ID

  """
  Autogenerated mutation for updating multiple instance of Country
  """
  updateCountrys(input: [UpdateCountryInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of Country
  """
  deleteCountry(id: ID!): Country

  """
  Autogenerated mutation for deleting multiple instance of Country
  """
  deleteCountrys(ids: [ID!]): [Country]

  """
  Autogenerated mutation for adding single instance of LocalizedText
  """
  addLocalizedText(input: AddLocalizedTextInput!): ID

  """
  Autogenerated mutation for adding multiple instances of LocalizedText
  """
  addLocalizedTexts(input: [AddLocalizedTextInput]!): [ID]

  """
  Autogenerated mutation for updating single instance of LocalizedText
  """
  updateLocalizedText(input: UpdateLocalizedTextInput!): ID

  """
  Autogenerated mutation for updating multiple instance of LocalizedText
  """
  updateLocalizedTexts(input: [UpdateLocalizedTextInput]!): [ID]

  """
  Autogenerated mutation for deleting single instance of LocalizedText
  """
  deleteLocalizedText(id: ID!): LocalizedText

  """
  Autogenerated mutation for deleting multiple instance of LocalizedText
  """
  deleteLocalizedTexts(ids: [ID!]): [LocalizedText]
}

type Query {
  getWebDetectionWebEntities(webDetection: WebDetectionAsInput!): [WebEntity!]!
  getImageAnalysisResultsWebDetection(
    imageAnalysisResults: ImageAnalysisResultsAsInput!
  ): WebDetectionOutput!
  getWebEntityDescription(webEntity: WebEntityAsInput!): String!
  getWebEntityScore(webEntity: WebEntityAsInput!): Float!
  analyzeImage(image: ImageAsInput!): ImageAnalysisResultsOutput!
  CKGErrors: [String]

  """
  All instances of BestGuessLabel kind
  """
  allBestGuessLabels(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [BestGuessLabel]

  """
  Get single instance of BestGuessLabel kind by ID
  """
  bestGuessLabel(id: ID!): BestGuessLabel

  """
  Get list of instance of BestGuessLabel kind by IDs
  """
  bestGuessLabels(ids: [ID]!): [BestGuessLabel]

  """
  Get instances of BestGuessLabel kind based on one or more field filters
  """
  bestGuessLabelFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [BestGuessLabel]

  """
  All instances of LabelAnnotation kind
  """
  allLabelAnnotations(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LabelAnnotation]

  """
  Get single instance of LabelAnnotation kind by ID
  """
  labelAnnotation(id: ID!): LabelAnnotation

  """
  Get list of instance of LabelAnnotation kind by IDs
  """
  labelAnnotations(ids: [ID]!): [LabelAnnotation]

  """
  Get instances of LabelAnnotation kind based on one or more field filters
  """
  labelAnnotationFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LabelAnnotation]

  """
  All instances of WebDetection kind
  """
  allWebDetections(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [WebDetection]

  """
  Get single instance of WebDetection kind by ID
  """
  webDetection(id: ID!): WebDetection

  """
  Get list of instance of WebDetection kind by IDs
  """
  webDetections(ids: [ID]!): [WebDetection]

  """
  Get instances of WebDetection kind based on one or more field filters
  """
  webDetectionFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [WebDetection]

  """
  All instances of BoundingPoly kind
  """
  allBoundingPolys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [BoundingPoly]

  """
  Get single instance of BoundingPoly kind by ID
  """
  boundingPoly(id: ID!): BoundingPoly

  """
  Get list of instance of BoundingPoly kind by IDs
  """
  boundingPolys(ids: [ID]!): [BoundingPoly]

  """
  Get instances of BoundingPoly kind based on one or more field filters
  """
  boundingPolyFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [BoundingPoly]

  """
  All instances of LocalizedObjectAnnotation kind
  """
  allLocalizedObjectAnnotations(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LocalizedObjectAnnotation]

  """
  Get single instance of LocalizedObjectAnnotation kind by ID
  """
  localizedObjectAnnotation(id: ID!): LocalizedObjectAnnotation

  """
  Get list of instance of LocalizedObjectAnnotation kind by IDs
  """
  localizedObjectAnnotations(ids: [ID]!): [LocalizedObjectAnnotation]

  """
  Get instances of LocalizedObjectAnnotation kind based on one or more field filters
  """
  localizedObjectAnnotationFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LocalizedObjectAnnotation]

  """
  All instances of WebEntity kind
  """
  allWebEntitys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [WebEntity]

  """
  Get single instance of WebEntity kind by ID
  """
  webEntity(id: ID!): WebEntity

  """
  Get list of instance of WebEntity kind by IDs
  """
  webEntitys(ids: [ID]!): [WebEntity]

  """
  Get instances of WebEntity kind based on one or more field filters
  """
  webEntityFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [WebEntity]

  """
  All instances of ImageAnalysisResults kind
  """
  allImageAnalysisResultss(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ImageAnalysisResults]

  """
  Get single instance of ImageAnalysisResults kind by ID
  """
  imageAnalysisResults(id: ID!): ImageAnalysisResults

  """
  Get list of instance of ImageAnalysisResults kind by IDs
  """
  imageAnalysisResultss(ids: [ID]!): [ImageAnalysisResults]

  """
  Get instances of ImageAnalysisResults kind based on one or more field filters
  """
  imageAnalysisResultsFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [ImageAnalysisResults]

  """
  All instances of LanguageTag kind
  """
  allLanguageTags(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LanguageTag]

  """
  Get single instance of LanguageTag kind by ID
  """
  languageTag(id: ID!): LanguageTag

  """
  Get list of instance of LanguageTag kind by IDs
  """
  languageTags(ids: [ID]!): [LanguageTag]

  """
  Get instances of LanguageTag kind based on one or more field filters
  """
  languageTagFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LanguageTag]

  """
  All instances of Vertex2D kind
  """
  allVertex2Ds(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Vertex2D]

  """
  Get single instance of Vertex2D kind by ID
  """
  vertex2D(id: ID!): Vertex2D

  """
  Get list of instance of Vertex2D kind by IDs
  """
  vertex2Ds(ids: [ID]!): [Vertex2D]

  """
  Get instances of Vertex2D kind based on one or more field filters
  """
  vertex2DFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Vertex2D]

  """
  All instances of Language kind
  """
  allLanguages(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Language]

  """
  Get single instance of Language kind by ID
  """
  language(id: ID!): Language

  """
  Get list of instance of Language kind by IDs
  """
  languages(ids: [ID]!): [Language]

  """
  Get instances of Language kind based on one or more field filters
  """
  languageFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Language]

  """
  All instances of Country kind
  """
  allCountrys(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Country]

  """
  Get single instance of Country kind by ID
  """
  country(id: ID!): Country

  """
  Get list of instance of Country kind by IDs
  """
  countrys(ids: [ID]!): [Country]

  """
  Get instances of Country kind based on one or more field filters
  """
  countryFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [Country]

  """
  All instances of LocalizedText kind
  """
  allLocalizedTexts(
    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LocalizedText]

  """
  Get single instance of LocalizedText kind by ID
  """
  localizedText(id: ID!): LocalizedText

  """
  Get list of instance of LocalizedText kind by IDs
  """
  localizedTexts(ids: [ID]!): [LocalizedText]

  """
  Get instances of LocalizedText kind based on one or more field filters
  """
  localizedTextFilter(
    filters: [FieldFilterInput]!

    """
    Number of results to return
    """
    take: Int = 1000

    """
    Number of results to skip from the query result. Applied before take
    """
    offset: Int = 0
  ): [LocalizedText]

  """
  Mandatory service manifest.
  """
  info: Info!

  """
  Kind Query
  """
  query(input: KindQueryInput!): InstanceSet
  queryJSON(input: KindQueryInput!): String
}

input RBACAuthorityAsInput {
  id: ID!
  description: String
}

input RBACPolicyAsInput {
  id: ID!
  rbacAuthority: RBACAuthorityAsInput!
  rbacRole: RBACRoleAsInput!
  rbacVerb: RBACVerbAsInput!
  effective: DateTime
  expires: DateTime
  objectId: ID!
}

input RBACRoleAsInput {
  id: ID!
  description: String
}

input RBACVerbAsInput {
  id: ID!
  description: String
}

input SizeAsInput {
  id: ID!
  units: UnitOfMeasureAsInput
  amount: Float
}

scalar Time

input UnitOfMeasureAsInput {
  id: ID!
  name: String
  displayAs: String
}

"""
Autogenerated input for modifying instance of BestGuessLabel
"""
input UpdateBestGuessLabelInput {
  """
  id
  """
  id: ID!
  languageCode: ID
}

"""
Autogenerated input for modifying instance of BoundingPoly
"""
input UpdateBoundingPolyInput {
  """
  id
  """
  id: ID!
  vertices: [ID]
  normalizedVertices: [ID]
}

"""
Autogenerated input for modifying instance of Country
"""
input UpdateCountryInput {
  """
  id
  """
  id: ID!
  name: String
  localizedName: ID
}

"""
Autogenerated input for modifying instance of ImageAnalysisResults
"""
input UpdateImageAnalysisResultsInput {
  """
  id
  """
  id: ID!
  webDetection: ID
  localizedObjectAnnotations: [ID]
  labelAnnotations: [ID]
}

"""
Autogenerated input for modifying instance of LabelAnnotation
"""
input UpdateLabelAnnotationInput {
  """
  id
  """
  id: ID!
  description: String
  score: Float
}

"""
Autogenerated input for modifying instance of Language
"""
input UpdateLanguageInput {
  """
  id
  """
  id: ID!
  localizedName: ID
  name: String
}

"""
Autogenerated input for modifying instance of LanguageTag
"""
input UpdateLanguageTagInput {
  """
  id
  """
  id: ID!
  languageCode: ID
  country: ID
}

"""
Autogenerated input for modifying instance of LocalizedObjectAnnotation
"""
input UpdateLocalizedObjectAnnotationInput {
  """
  id
  """
  id: ID!
  name: String
  score: Float
  boundingPoly: ID
}

"""
Autogenerated input for modifying instance of LocalizedText
"""
input UpdateLocalizedTextInput {
  """
  id
  """
  id: ID!
  languageTag: ID
  text: String
}

"""
Autogenerated input for modifying instance of Vertex2D
"""
input UpdateVertex2DInput {
  """
  id
  """
  id: ID!
  x: Float
  y: Float
}

"""
Autogenerated input for modifying instance of WebDetection
"""
input UpdateWebDetectionInput {
  """
  id
  """
  id: ID!
  webEntities: [ID]
  bestGuessLabels: [ID]
}

"""
Autogenerated input for modifying instance of WebEntity
"""
input UpdateWebEntityInput {
  """
  id
  """
  id: ID!
  score: Float
  description: String
}

type Vertex2D {
  """
  id
  """
  id: ID!
  x: Float!
  y: Float!
}

input Vertex2DAsInput {
  id: ID!
  x: Float!
  y: Float!
}

type Vertex2DOutput {
  id: ID!
  x: Float!
  y: Float!
}

type WebDetection {
  """
  id
  """
  id: ID!
  webEntities: [WebEntity]!
  bestGuessLabels: [BestGuessLabel]!
}

input WebDetectionAsInput {
  id: ID!
  webEntities: [WebEntityAsInput!]!
  bestGuessLabels: [BestGuessLabelAsInput!]!
}

type WebDetectionOutput {
  id: ID!
  webEntities: [WebEntity!]!
  bestGuessLabels: [BestGuessLabelOutput!]!
}

type WebEntity {
  """
  id
  """
  id: ID!
  score: Float!
  description: String!
}

input WebEntityAsInput {
  id: ID!
  score: Float!
  description: String!
}
